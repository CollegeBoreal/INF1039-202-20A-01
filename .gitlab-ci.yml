# This file is a template, and might need editing before it works on your project.
# see https://docs.gitlab.com/ce/ci/yaml/README.html for all available options

# you can delete this line if you're not using Docker
image: ubuntu:latest

before_script:
  ##
  ## https://docs.gitlab.com/ee/ci/ssh_keys/
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -qy && apt-get install openssh-client git -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  ##
  ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
  ## with your own domain name. You can copy and repeat that command if you have
  ## more than one server to connect to.
  ##
  - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

  ##
  ## Setup your git environment by adjusting the commiter information and enabling SSH on push
  ##
  ## - apt-get update && apt-get -y upgrade git
  - git config --global user.email ${GITLAB_USER_EMAIL}
  - git config --global user.name ${GITLAB_USER_LOGIN}
  - git remote set-url origin git@gitlab.com:CollegeBoreal/INF1039-202-20A-01.git


  ##
  ## To verify all your environment variables uncomment the following lines
  ## warning: this may show your private SSH key
  ##
  ## - export

  ##
  ## Install Python
  ## Warning Python Alias is not working
  ##
  - apt-get install -y python3-dev
  - shopt -s expand_aliases
  - alias python=python3

  
after_script:
  - echo "After script section"
  - echo "For example you might do some cleanup here"

build1:
  stage: build
  script:
    - echo "Do your build here"

Corrections:
  stage: test
  script:
    ##
    ## Evaluating chapter 3.Variables Student Participation
    ## 
    - echo "Evaluating chapter 3.Variables Student Participation"
    - cd 3.Variables
    - bash .scripts/run.sh

    ##
    ## Evaluating chapter 4.Strings Student Participation
    ## 
    - echo "Evaluating chapter 4.Strings Student Participation"
    - cd ../4.Strings
    - bash .scripts/run.sh

    ##
    ## Evaluating chapter 5.Tuples Student Participation
    ## 
    - echo "Evaluating chapter 5.Tuples Student Participation"
    - cd ../5.Tuples
    - bash .scripts/run.sh

    ##
    ## Evaluating chapter A.Capstone-I Student Participation
    ## 
    - echo "Evaluating chapter A.Capstone-I Student Participation"
    - git pull origin HEAD:master
    - cd ../A.Capstone-I
    - bash .scripts/run.sh

    ##
    ## Add all edited files
    ## 
    - git add .
    - git commit --message "adding participation"

    ##
    ## Push features on pipelines
    ## https://docs.gitlab.com/ee/user/project/push_options.html
    ## git show-ref shows that gitlab uses refs/pipelines/* 
    ## git push --all doesn't generate an error but no changes are seen HEAD:master reference fixes the issue
    ## git push --push-option=ci.skip is needed otherwise another pipeline is created
    ##
    - git push --push-option=ci.skip origin HEAD:master

deploy1:
  stage: deploy
  script:
    - echo "Do your deploy here"
